#********************************************************************
# Wrapper Java Properties
#********************************************************************
# Java Application
set.LC_CTYPE="zh_CN.UTF-8"
set.JAVA_HOME={{ java_home }}
set.CATALINA_HOME={{ tomcat_path }}
wrapper.java.command=%JAVA_HOME%/bin/java
wrapper.port.min=31000
wrapper.port.max=31999
wrapper.jvm.port.min=32000
wrapper.jvm.port.max=32999
wrapper.javaio.use_thread=TRUE
wrapper.javaio.buffer_size=10485760

# Limit the use of system-wide resources.
wrapper.ulimit.nproc.soft={{ ulimit_nproc }}
wrapper.ulimit.nproc.hard={{ ulimit_nproc }}
wrapper.ulimit.nofile.soft={{ ulimit_nofile }}
wrapper.ulimit.nofile.hard={{ ulimit_nofile }}
wrapper.ulimit.core.soft={{ ulimit_core }}
wrapper.ulimit.core.hard={{ ulimit_core }}
wrapper.ulimit.loglevel=STATUS

# Tell the Wrapper to log the full generated Java command line.
wrapper.java.command.loglevel=NONE

# Java Main class.  This class must implement the WrapperListener interface
#  or guarantee that the WrapperManager class is initialized.  Helper
#  classes are provided to do this for you.  See the Integration section
#  of the documentation for details.
wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperStartStopApp

# Java Classpath (include wrapper.jar)  Add class path elements as
#  needed starting from 1
wrapper.java.classpath.1  = %CATALINA_HOME%/bin/bootstrap.jar
wrapper.java.classpath.2  = %CATALINA_HOME%/bin/tomcat-juli.jar
wrapper.java.classpath.3  = %CATALINA_HOME%/lib/disruptor.jar
wrapper.java.classpath.4  = %CATALINA_HOME%/lib/log4j-api.jar
wrapper.java.classpath.5  = %CATALINA_HOME%/lib/log4j-core.jar
wrapper.java.classpath.6  = %CATALINA_HOME%/lib/log4j-jmx-gui.jar
wrapper.java.classpath.7  = %CATALINA_HOME%/lib/log4j-jul.jar
wrapper.java.classpath.8  = %CATALINA_HOME%/lib/logstash-gelf.jar
wrapper.java.classpath.9  = %CATALINA_HOME%/lib/wrapper.jar
wrapper.java.classpath.10 = %JAVA_HOME%/lib/tools.jar

# Java Library Path (location of Wrapper.DLL or libwrapper.so)
wrapper.java.library.path.1=%CATALINA_HOME%/lib
wrapper.java.library.path.2=/usr/lib64

# Java Bits.  On applicable platforms, tells the JVM to run in 32 or 64-bit mode.
wrapper.java.additional.auto_bits=TRUE

# Java Additional Parameters
wrapper.java.additional.1  = -Dcatalina.base=%CATALINA_HOME%
wrapper.java.additional.2  = -Dcatalina.home=%CATALINA_HOME%
wrapper.java.additional.3  = -Dcom.sun.management.jmxremote
wrapper.java.additional.4  = -Dcom.sun.management.jmxremote.authenticate=false
wrapper.java.additional.5  = -Dcom.sun.management.jmxremote.ssl=false
wrapper.java.additional.6  = -Djava.io.tmpdir=%CATALINA_HOME%/temp
wrapper.java.additional.7  = -Djava.net.preferIPv4Addresses
wrapper.java.additional.8  = -Djava.net.preferIPv4Stack=true
wrapper.java.additional.9  = -Djava.security.egd=file:/dev/urandom
wrapper.java.additional.10 = -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
wrapper.java.additional.11 = -Djdk.tls.ephemeralDHKeySize=2048
wrapper.java.additional.12 = -Dlog4j.configurationFile=%CATALINA_HOME%/conf/log4j2.xml
wrapper.java.additional.13 = -DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
wrapper.java.additional.14 = -Dsun.rmi.dgc.client.gcInterval=28800
wrapper.java.additional.15 = -Dsun.rmi.dgc.server.gcInterval=28800
wrapper.java.additional.16 = -Duser.timezone=Asia/Shanghai
wrapper.java.additional.17 = -javaagent:%CATALINA_HOME%/lib/jmx_prometheus_javaagent.jar=20201:%CATALINA_HOME%/conf/prometheus.yml
wrapper.java.additional.18 = -server
wrapper.java.additional.19 = -Xmn{{ ((ansible_memtotal_mb - 2048 ) * 0.6 * 0.2)|int }}m
wrapper.java.additional.20 = -Xss256k
wrapper.java.additional.21 = -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses
wrapper.java.additional.22 = -XX:+HeapDumpOnOutOfMemoryError
wrapper.java.additional.23 = -XX:+TieredCompilation
wrapper.java.additional.24 = -XX:HeapDumpPath=/tmp
{% if ansible_memtotal_mb > 4096 and ansible_memtotal_mb <= 8192 %}
wrapper.java.additional.25 = -XX:MaxMetaspaceSize=512m
{% elif ansible_memtotal_mb > 8192 and ansible_memtotal_mb <= 16384 %}
wrapper.java.additional.25 = -XX:MaxMetaspaceSize=1024m
{% else %}
{% endif %}
wrapper.java.additional.26 = -XX:SurvivorRatio=1

# Initial Java Heap Size (in MB)
wrapper.java.initmemory={{ ((ansible_memtotal_mb - 2048 ) * 0.6)|int }}

# Maximum Java Heap Size (in MB)
wrapper.java.maxmemory={{ ((ansible_memtotal_mb - 2048 ) * 0.6)|int }}

# Application parameters.  Add parameters as needed starting from 1
wrapper.app.parameter.1=org.apache.catalina.startup.Bootstrap
wrapper.app.parameter.2=1
wrapper.app.parameter.3=start
wrapper.app.parameter.4=org.apache.catalina.startup.Bootstrap
wrapper.app.parameter.5=true
wrapper.app.parameter.6=1
wrapper.app.parameter.7=stop 

wrapper.filter.trigger.1=java.lang.OutOfMemoryError
wrapper.filter.action.1=RESTART
wrapper.filter.trigger.2=java.lang.StackOverflowError
wrapper.filter.action.2=RESTART
wrapper.logfile=%CATALINA_HOME%/logs/catalina.out

#********************************************************************
# Wrapper Logging Properties
#********************************************************************
# Enables Debug output from the Wrapper.
# wrapper.debug=TRUE

# Format of output for the console.  (See docs for formats)
wrapper.console.format=PM

# Log Level for console output.  (See docs for log levels)
wrapper.console.loglevel=INFO

# Log file to use for wrapper output logging.
wrapper.logfile=%CATALINA_HOME%/logs/catalina.out

# Format of output for the log file.  (See docs for formats)
wrapper.logfile.format=TM

# Log Level for log file output.  (See docs for log levels)
wrapper.logfile.loglevel=INFO

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
wrapper.logfile.maxsize=50m

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=25

# Log Level for sys/event log output.  (See docs for log levels)
wrapper.syslog.loglevel=NONE

#********************************************************************
# Wrapper General Properties
#********************************************************************
# Allow for the use of non-contiguous numbered properties
wrapper.ignore_sequence_gaps=TRUE

# Title to use when running as a console
wrapper.console.title=@app.long.name@
